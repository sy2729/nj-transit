{"version":3,"sources":["js/eventHub.js","js/timer.js","js/color.js","js/color-input.js","index.js"],"names":["window","eventHub","eventName","data","events","map","fn","call","undefined","push","view","time","querySelector","el","textContent","hour","minute","second","period","weekday","month","day","year","model","controller","render","bindEvent","getTime","Date","timeSet","getFullYear","getMonthName","getMonth","getDate","convertSmallTime","getHours","getMinutes","getSeconds","getWeekDay","getDay","e","isNaN","newTime","init","innerHTML","template","colors","colorDoms","document","querySelectorAll","i","length","style","backgroundColor","bindEventHub","on","changeColor","$el","$form","addEventListener","preventDefault","colorValues","target","nodeName","toUpperCase","left","value","middle","right","emit","classList","remove","add","CountDown","ele","duration","timeToCountDown","prototype","hours","minutes","seconds","update","formate","Math","floor","startCount"],"mappings":"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","file":"transit-ticket.2cd7a30e.map","sourceRoot":"..","sourcesContent":["window.eventHub = {\n    events: {},\n    emit: function emit(eventName, data) {\n        var fnList = this.events[eventName];\n        fnList.map(function (fn) {\n            fn.call(undefined, data);\n        });\n    },\n    on: function on(eventName, fn) {\n        if (this.events[eventName] === undefined) {\n            this.events[eventName] = [];\n        };\n        this.events[eventName].push(fn);\n    },\n    off: function off() { }\n};","{\n    let view = {\n        el: '#timer',\n        render(data) {\n            let {time} = data || ''\n            if(time) {\n                document.querySelector(`${this.el} > .time`).textContent = time.hour + ':' + time.minute + ':' + time.second + ' ' + time.period;\n                document.querySelector(`${this.el} > .date`).textContent = time.weekday + ', ' + time.month + ' ' + time.day + ', ' + time.year;\n\n            }\n        }\n    };\n\n    let model = {\n        data: {}\n    };\n\n    let controller = {\n        init(view, model) {\n            this.view = view;\n            this.model = model;\n            this.view.render()\n            this.bindEvent()\n        },\n\n        bindEvent(){\n            let time;\n            setInterval(()=>{\n                 time = this.getTime();\n                 this.model.data.time = time;\n                 this.view.render(this.model.data);\n            }, 1000)\n\n        },\n        \n        getTime() {\n            let time = new Date();\n            let timeSet = {\n                year: time.getFullYear(),\n                month: this.getMonthName(time.getMonth()),\n                day: time.getDate(),\n                hour: this.convertSmallTime(time.getHours()),\n                minute: this.convertSmallTime(time.getMinutes()),\n                second: this.convertSmallTime(time.getSeconds()),\n                weekday: this.getWeekDay(time.getDay()),\n                period: time.getHours()<12?'AM':'PM',\n            };\n            return timeSet\n        },\n\n        getWeekDay(e){\n            return isNaN(e) ? null : ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'][e];\n        },\n\n        convertSmallTime(time){\n            let newTime = time<10?'0'+time:time;\n            return newTime;\n        },\n\n        getMonthName(e) {\n            return isNaN(e) ? null : ['Jan', 'Feb', 'March', 'April', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'][e];\n        }\n        \n\n    };\n\n    controller.init(view, model)\n}","{\n    let view = {\n        el: '#colorBar',\n        template: `\n            <div class=\"color\"></div>\n            <div class=\"color\"></div>\n            <div class=\"color\"></div>\n        `,\n        render(data){\n            document.querySelector(this.el).innerHTML = this.template;\n            colors = data.colors;\n            let colorDoms = document.querySelectorAll('.color');\n            for(let i = 0; i < colorDoms.length; i++) {\n                colorDoms[i].style.backgroundColor = colors[i];\n            }\n\n        }\n    };\n\n    let model = {\n        data: {\n            colors: ['#385656', '#BDD2E7', '#EEDB88'],\n        }\n    };\n\n    let controller = {\n        init(view, model){\n            this.view = view;\n            this.model = model;\n            this.view.render(this.model.data);\n            this.bindEvent();\n            this.bindEventHub();\n        },\n\n        bindEvent(){\n\n        },\n        bindEventHub(){\n            eventHub.on('color-inputed', (data)=>{\n                let colors = [];\n                for( i in data) {\n                    colors.push(data[i])\n                }\n                \n                this.changeColor(colors);\n            })\n        },\n\n        changeColor(data){\n            this.model.data.colors = data;\n            this.view.render(this.model.data);\n        }\n    };\n\n    controller.init(view, model);\n}","{\n    let view = {\n        el: '#colorInput',\n        template: `\n            <form>\n                <span class=\"close\">Close</span>\n                <label>\n                Left Color\n                <input name=\"left\" placeholder=\"colorCode\" type='color'>\n                </label>\n                <label>\n                Middle Color\n                <input name=\"middle\" placeholder=\"colorCode\" type='color'>\n                </label>\n                <label>\n                Right Color\n                <input name=\"right\" placeholder=\"colorCode\" type='color'>\n                </label>\n\n                <input type=\"submit\" value=\"Change\">\n            </form>\n        `,\n\n        init(){\n            this.$el = document.querySelector(this.el);\n        },\n\n        render(){\n            this.$el.innerHTML = this.template;\n            this.$form = this.$el.querySelector('form')\n        }\n    };\n\n    let model = {\n        data: {\n\n        }\n    };\n\n    let controller = {\n        init(view, model) {\n            this.view = view;\n            this.model = model;\n            this.view.init();\n            this.view.render();\n            this.bindEvent();\n            this.bindEventHub();\n        },\n\n        bindEvent(){\n            this.view.$el.addEventListener('submit', (e)=>{\n                e.preventDefault();\n                let colorValues = {};\n                if (e.target && e.target.nodeName.toUpperCase() == \"FORM\") {\n                    colorValues.left = this.view.$form.left.value;\n                    colorValues.middle = this.view.$form.middle.value;\n                    colorValues.right = this.view.$form.right.value;\n                }\n                eventHub.emit('color-inputed', colorValues);\n                this.view.$el.classList.remove('active')\n            })\n\n            this.view.$el.addEventListener('click', (e) => {\n                if (e.target && e.target.classList[0] === \"close\") {\n                    this.view.$el.classList.remove('active')\n                }\n            })\n        },\n\n        bindEventHub(){\n            eventHub.on('open-color-input', ()=>{\n                this.view.$el.classList.add('active')\n            })\n        }\n    };\n\n    controller.init(view, model)\n}","import {  } from \"./scss/index.scss\";\nimport {  } from \"./js/eventHub\";\nimport {  } from \"./js/timer\";\nimport {  } from \"./js/color\";\nimport {  } from \"./js/color-input\";\n\n        function CountDown(ele, duration){\n            this.ele = ele;\n        this.timeToCountDown = duration;\n        }\n\n        CountDown.prototype = {\n            render(time){\n        this.ele.textContent = 'Expires in ' + time.day + ':' + time.hours + ':' + time.minutes + ':' + time.seconds;\n            },\n            startCount(){\n            this.render(this.timeToCountDown);\n        let update = ()=>{\n            setTimeout(() => {\n                if (this.timeToCountDown > 0) {\n                    this.timeToCountDown--;\n                    let newTime = this.formate(this.timeToCountDown);\n                    this.render(newTime);\n                    update();\n                } else { alert('expired!'); };\n            }, 1000);\n        };\n                update();\n            },\n\n            formate(time){\n            let timeSet = {\n            day: '00',\n                    hours: this.convertSmallTime(Math.floor(time / 60 / 60)),\n                    minutes: this.convertSmallTime(Math.floor((time / 60)) % 60),\n                    seconds: this.convertSmallTime(time % 60),\n                }\n                return timeSet;\n            },\n            convertSmallTime(time) {\n            let newTime = time < 10 ? '0' + time : time;\n                return newTime;\n            },\n\n        }\n\n        let time = new CountDown(document.querySelector('#countDown'), 60*60*2.8);\n        time.startCount();\n\n\n        // listen to color-input component Open\n        document.querySelector('#back').addEventListener('click', ()=>{\n            eventHub.emit('open-color-input');\n        })"]}